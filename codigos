aca estan los codigos el  mi_modulo.py

import string
import random
from datetime import datetime


#1
def es_par(n):
    return n % 2 == 0



#2
def calcular_edad(fecha_nacimiento):
    fecha_nacimiento = datetime.strptime(fecha_nacimiento, "%Y-%m-%d")
    hoy = datetime.now()
    
    edad = hoy.year - fecha_nacimiento.year
    
    if (hoy.month, hoy.day) < (fecha_nacimiento.month, fecha_nacimiento.day):
        edad -= 1
    
    if fecha_nacimiento > hoy:
        raise ValueError("La fecha de nacimiento no puede ser en el futuro.")
    
    return edad


#3

def generar_id():
    caracteres = string.ascii_letters + string.digits  
    return ''.join(random.choice(caracteres) for _ in range(8))


#4
def ordenar_por_longitud(lista_palabras):
    return sorted(lista_palabras, key=len)



#5
class Carrito:
    def __init__(self):
        self.productos = []
        self.subtotal = 0
    
    def agregar_producto(self, nombre, precio):
        self.productos.append({'nombre': nombre, 'precio': precio})
        self.subtotal += precio
    
    def calcular_total(self, descuento):
        if not (0 <= descuento <= 100):
            raise ValueError("El descuento debe estar entre 0% y 100%")
        
        total = self.subtotal * (1 - descuento / 100)
        return total


#6

class Inventario:
    def __init__(self):
        self.productos = {}

    def agregar_producto(self, id_producto, nombre, stock):
        if id_producto in self.productos:
            raise ValueError("El ID del producto ya existe.")
        self.productos[id_producto] = {"nombre": nombre, "stock": stock}

    def eliminar_producto(self, id_producto):
        if id_producto not in self.productos:
            raise ValueError("El producto no existe.")
        del self.productos[id_producto]

    def actualizar_stock(self, id_producto, nuevo_stock):
        if id_producto not in self.productos:
            raise ValueError("El producto no existe.")
        self.productos[id_producto]["stock"] = nuevo_stock

    def consultar_producto(self, id_producto):
        if id_producto not in self.productos:
            raise ValueError("El producto no existe.")
        return self.productos[id_producto]

#7

class CalculadoraDescuentos:
    def __init__(self, precio_original, porcentaje_descuento):
        self.precio_original = precio_original
        self.porcentaje_descuento = porcentaje_descuento

    def validar_precio(self):
        if self.precio_original <= 0:
            raise ValueError("El precio debe ser mayor a cero.")

    def validar_descuento(self):
        if not (0 <= self.porcentaje_descuento <= 100):
            raise ValueError("El descuento debe estar entre 0% y 100%.")

    def calcular_precio_final(self):
        self.validar_precio()
        self.validar_descuento()
        descuento = self.precio_original * (self.porcentaje_descuento / 100)
        return self.precio_original - descuento


#8
class SistemaAutenticacion:
    def __init__(self):
        self.usuarios = {}

    def registrar_usuario(self, username, password):
        if username in self.usuarios:
            raise ValueError("El nombre de usuario ya está en uso.")
        self.usuarios[username] = {"password": password, "logged_in": False}

    def iniciar_sesion(self, username, password):
        if username not in self.usuarios or self.usuarios[username]["password"] != password:
            raise ValueError("Credenciales incorrectas.")
        self.usuarios[username]["logged_in"] = True

    def cerrar_sesion(self, username):
        if username not in self.usuarios or not self.usuarios[username]["logged_in"]:
            raise ValueError("El usuario no está autenticado.")
        self.usuarios[username]["logged_in"] = False

    def recuperar_contrasena(self, username):
        if username not in self.usuarios:
            raise ValueError("Usuario no encontrado.")
        return "Enlace de recuperación enviado al correo registrado."  # Simulación del envío


#9

class GestionTareas:
    def __init__(self):
        self.tareas = []

    def crear_tarea(self, titulo, fecha_vencimiento):
        tarea = {"titulo": titulo, "fecha_vencimiento": fecha_vencimiento, "completada": False}
        self.tareas.append(tarea)

    def marcar_completada(self, titulo):
        for tarea in self.tareas:
            if tarea["titulo"] == titulo:
                tarea["completada"] = True
                return
        raise ValueError("Tarea no encontrada.")

    def eliminar_tarea(self, titulo):
        for tarea in self.tareas:
            if tarea["titulo"] == titulo:
                self.tareas.remove(tarea)
                return
        raise ValueError("Tarea no encontrada.")

    def listar_pendientes(self):
        return [tarea for tarea in self.tareas if not tarea["completada"]]


#10

class SistemaReservas:
    def __init__(self):
        self.reservas = []  # Inicializa una lista para almacenar reservas

    def crear_reserva(self, nombre_cliente, fecha, hora, cantidad_personas):
        # Verifica si ya existe una reserva en la misma fecha y hora
        for reserva in self.reservas:
            if reserva["fecha"] == fecha and reserva["hora"] == hora:
                raise ValueError("Ya existe una reserva en esta fecha y hora.")
        
        # Si no hay conflictos, crea la reserva
        nueva_reserva = {
            "nombre_cliente": nombre_cliente,
            "fecha": fecha,
            "hora": hora,
            "cantidad_personas": cantidad_personas
        }
        self.reservas.append(nueva_reserva)  # Agrega la nueva reserva a la lista

    def cancelar_reserva(self, nombre_cliente, fecha, hora):
        # Lógica para cancelar la reserva
        for reserva in self.reservas:
            if reserva["nombre_cliente"] == nombre_cliente and reserva["fecha"] == fecha and reserva["hora"] == hora:
                self.reservas.remove(reserva)  # Elimina la reserva
                return
        raise ValueError("No existe reserva para cancelar.")
  
